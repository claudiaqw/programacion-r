# Suma 5 + 5
5 + 5
# Resta 5 - 5
5 - 5
# Multiplica 3 * 5
3 * 5
# Suma 5 +5 y divide el resultado entre 2
(5 + 5)/2
# Asgina el valor 5 a la variable my_apples
my_apples <-
# Muestra el contenido de la variable my_apples
my_apples
# Calcula 2 elevado a 5
2^5
# Calcula modulo de 28 entre 6
28 %% 6
# Asgina el valor 5 a la variable my_apples
my_apples <- 5
# Muestra el contenido de la variable my_apples
my_apples
# Asgina el valor 6 a la variable my_pears
my_pears <- 6
# Muestra el contenido de la variable my_pears
my_pears
# Suma peras con manzanas: crea una nueva variable my_fruit con la suma
my_fruit <- my_apples + my_pears
# Muestra el número total de piezas de fruta
my_fruit
my_numeric <- 42
is.numeric(my_numeric)
my_character <- "forty-two"
is.character(my_character)
my_logical <- FALSE
is.boolean(my_logical)
my_logical <- FALSE
is.boolean(my_logical)
typeof(my_numeric)
typeof(my_character)
typeof(my_logical)
class(my_numeric)
class(my_character)
class(my_logical)
m1 <- matrix(1:9, byrow = TRUE, nrow = 3)
m1
m2 <- matrix(c(0, -1, 4)) # Crea una matriz con una columna
m2
d1 <- diag(3) # Crea una matriz diagonal 3x3
d1
m <- matrix(1:9, byrow = TRUE, nrow = 3)
m
m[1, ] # Seleccionamos la primera fila
m[1:2, ] # Seleccionamos las dos primeras filas
m[, 3] # Seleccionamos la última columna
m[, c(1, 3)] # Seleccionamos la primera y la última columna
m[1, ] <- 0 # Asigna un vector de ceros a la primera fila
m
m[-1, ] # Seleccionamos todas las filas menos la primera
m[-nrow(m), -ncol(m)] # Quitamos la última fila y la última columna
new_hope <- c(461, 314.4)
empire_strikes <- c(290.5, 247.9)
return_jedi <- c(309.3, 165.8)
star_wars_matrix <- matrix(c(new_hope,empire_strikes,return_jedi), byrow = TRUE, nrow = 3)
star_wars_matrix
star_wars_matrix <- matrix(c(new_hope,empire_strikes,return_jedi), byrow = TRUE, nrow = 3)
star_wars_matrix
# Ponles nombres a las columnas: "US" y "non-US"
colnames(star_wars_matrix) <- c("US","non-US")
star_wars_matrix
star_wars_matrix
# Ponles nombres a las columnas: "US" y "non-US"
colnames(star_wars_matrix) <- c("US","non-US")
star_wars_matrix
# Ponles nombres a las filas: "A New Hope", "The Empire Strikes Back" y "Return of the Jedi"
rownames(star_wars_matrix) <- c("A New Hope", "The Empire Strikes Back", "Return of the Jedi")
star_wars_matrix
# Si el precio de la entrada es de 5$, estima el número de espectadores de cada película
visitors <- rowSums(star_wars_matrix/5)
visitors
ticket_prices_matrix <- matrix(c(5, 5, 6, 6, 7, 7), nrow = 3, byrow = TRUE, dimnames = list(rownames(star_wars_matrix), colnames(star_wars_matrix)))
ticket_prices_matrix
visitors <- rowSums(star_wars_matrix / ticket_prices_matrix)
visitors
library(data.table)
###################################
# Selección en i                  #
###################################
# Creación del data.table
DT <- data.table(x = c("a", "b", "c", "d", "e"),
y = c(1, 2, 3, 4, 5))
DT[3]
library(data.table)
###################################
# Selección en i                  #
###################################
# Creación del data.table
DT <- data.table(x = c("a", "b", "c", "d", "e"),
y = c(1, 2, 3, 4, 5))
View(DT)
View(DT)
# Selección de la tercera fila
DT[3] # Devuelve data.table
DT[[2]] # Devuelve vector
# Selección de la segunda y tercera fila (sin comas)
DT[2:3]
# Selecciona la penultima fila
DT[.N - 1]
# Nombres de las columnas
colnames(DT)
# Dimensiones (filas y columnas)
dim(DT)
# Selecciona la segunda fila dos veces y la tercera
DT[c(2, 2, 3)]
DT <- data.table(A = c(1, 2, 3, 4, 5),
B = c("a", "b", "c", "d", "e"),
C = c(6, 7, 8, 9, 10))
DT[, .(B)] #Devuelve un data.table
DT[, B] #Devuelve un vector
D <- 5
DT[, .(D)] #Devuelve un data.table con el valor 5
DT[[D]] #Devuelve un vector con el valor 5
DT[, .(D)] #Devuelve un data.table con el valor 5
D <- 1
DT[, .(D)] #Devuelve un data.table con el valor 5
# Selección de las filas 1 y 3 y columnas B y C
DT[c(1, 3), .(B, C)]
# Selección de la columna B y creación de una columna val como la multiplicación de A por C
ans <- DT[, .(B, val = A * C)]
data.table(B = c("a", "b", "c", "d", "e", "a", "b", "c", "d", "e"),
val = as.integer(c(6:10, 1:5)))
DT[, .(B, val = c(C, A))] #Reciclyng: repetición de valores
DT <- data.table(A = c("c", "b", "a", "c", "b", "a"),
B = c(1, 2, 3, 4, 5, 6))
DT <- data.table(A = c("c", "b", "a", "c", "b", "a"),
B = c(1, 2, 3, 4, 5, 6))
DT <- data.table(A = c("b", "b", "b", "b", "a", "a", "a", "a"),
B = c(1, 1, 2, 2, 3, 3, 4, 4),
C = c(3, 8, 4, 5, 1, 7, 2, 6))
DT[, .(C = sum(C)), by = .(A, B)][, .(C = tail(C, 2)), by = A]
###################################
# Encadenando llamadas            #
###################################
DT <- data.table(A = c("c", "b", "a", "c", "b", "a"),
B = c(1, 2, 3, 4, 5, 6))
DT[, sum(B), by = A][order(A)]
DT <- data.table(A = c("b", "b", "b", "b", "a", "a", "a", "a"),
B = c(1, 1, 2, 2, 3, 3, 4, 4),
C = c(3, 8, 4, 5, 1, 7, 2, 6))
DT[, .(C = sum(C)), by = .(A, B)][, .(C = tail(C, 2)), by = A]
DT <- data.table(A = c("b", "b", "b", "b", "a", "a", "a", "a"),
B = c(1, 1, 2, 2, 3, 3, 4, 4),
C = c(3, 8, 4, 5, 1, 7, 2, 6))
# Media de todas las columnas
DT[, lapply(.SD, mean), by = A]
# Mediana de todas las columnas
DT[, lapply(.SD, median), by = A]
DT <- data.table(grp = c(6, 6, 8, 8, 8),
Q1 = c(2, 2, 3, 5, 2),
Q2 = c(5, 5, 4, 4, 1),
Q3 = c(2, 1, 4, 2, 3),
H1 = c(3, 4, 5, 2, 4),
H2 = c(5, 2, 4, 1, 2))
# La suma de las columnas Q
DT[, lapply(.SD, sum), .SDcols = 2:4]
# La suma de H1 y H2
DT[, lapply(.SD, sum), .SDcols = paste0("H", 1:2)]
# Selecciona todas las filas excepto la primera de cada grupo, devolviendo sólo las columnas de Q
DT[, .SD[-1], by = grp, .SDcols = paste0("Q", 1:3)]
DT
# Selecciona todas las filas excepto la primera de cada grupo, devolviendo sólo las columnas de Q
DT[, .SD[-1], by = grp, .SDcols = paste0("Q", 1:3)]
DT <- data.table(x = c(2, 1, 2, 1, 2, 2, 1),
y = c(1, 3, 5, 7, 9, 11, 13),
z = c(2, 4, 6, 8, 10, 12, 14))
DT
# Suma todas las columnas (x, y, z) mientras agrupas por x
DT[, lapply(.SD, sum), by = x, .SDcols = c("x", "y", "z")]
DT
# Calcula la suma acumulada de x e y mientras agrupas por x y z > 8
DT[, lapply(.SD, cumsum), by = .(by1 = x, by2 = z > 8), .SDcols = c("x", "y")]
# Añade una nueva columna al data frame agregando por A
DT[, Total := sum(B) , by = A]
DT
# Añade una nueva columna al data frame agregando por A
DT[, Total := sum(B) , by = A]
DT <- data.table(A = c("b", "b", "b", "b", "a", "a", "a", "a"),
B = c(1, 1, 2, 2, 3, 3, 4, 4),
C = c(3, 8, 4, 5, 1, 7, 2, 6))
# Media de todas las columnas
DT[, lapply(.SD, mean), by = A]
# Mediana de todas las columnas
DT[, lapply(.SD, median), by = A]
DT <- data.table(grp = c(6, 6, 8, 8, 8),
Q1 = c(2, 2, 3, 5, 2),
Q2 = c(5, 5, 4, 4, 1),
Q3 = c(2, 1, 4, 2, 3),
H1 = c(3, 4, 5, 2, 4),
H2 = c(5, 2, 4, 1, 2))
# La suma de las columnas Q
DT[, lapply(.SD, sum), .SDcols = 2:4]
# La suma de H1 y H2
DT[, lapply(.SD, sum), .SDcols = paste0("H", 1:2)]
# Selecciona todas las filas excepto la primera de cada grupo, devolviendo sólo las columnas de Q
DT[, .SD[-1], by = grp, .SDcols = paste0("Q", 1:3)]
DT <- data.table(x = c(2, 1, 2, 1, 2, 2, 1),
y = c(1, 3, 5, 7, 9, 11, 13),
z = c(2, 4, 6, 8, 10, 12, 14))
# Suma todas las columnas (x, y, z) mientras agrupas por x
DT[, lapply(.SD, sum), by = x, .SDcols = c("x", "y", "z")]
# Calcula la suma acumulada de x e y mientras agrupas por x y z > 8
DT[, lapply(.SD, cumsum), by = .(by1 = x, by2 = z > 8), .SDcols = c("x", "y")]
DT <- data.table(A = c("a", "a", "a", "b", "b"),
B = c(1, 2, 3, 4, 5))
DT
# Añade una nueva columna al data frame agregando por A
DT[, Total := sum(B) , by = A]
DT
# Añade 1 a la columna B en las filas 2 y 4
DT[c(2, 4), B := B + 1L]
DT
# Añade una nueva columna al data frame agregando por A pero solo en las filas 2, 3, 4
DT[2:4, Total2 := sum(B), by = A]
DT
# Elimina columna
DT[, Total := NULL]
DT
DT <- data.table(A = c(1, 1, 1, 2, 2),
B = 1:5)
DT
DT[, `:=`(B = B + 1,  C = A + B, D = 2)]
DT
my_cols <- c("B", "C")
DT[, (my_cols) := NULL]
DT
##################################
# data.table                     #
##################################
library(data.table)
# Convierte iris en un data.table
iris.dt <- as.data.table(iris)
##################################
# data.table                     #
##################################
library(data.table)
# Convierte iris en un data.table
iris.dt <- as.data.table(iris)
# Revisa su contenido
summary(iris.dt)
iris.dt
# Para cada especie calcula la longitud media del sépalo
iris.dt[, long_media = mean(Sepal.Length), by = Species]
# Para cada especie calcula la longitud media del sépalo
iris.dt[, long_media = mean(Sepal.Length), by = .(Species)]
# Para cada especie calcula la longitud media del sépalo
iris.dt[, .(long_media = mean(Sepal.Length)), by = .(Species)]
# Agrupando por la primera letra del nombre de cada especie calcula la longitud media del sépalo
iris.dt[, ,(long_media_sepal = mean(Sepal.Length)), by = .(Species[1])]
# Agrupando por la primera letra del nombre de cada especie calcula la longitud media del sépalo
iris.dt[, ,(long_media_sepal = mean(Sepal.Length)), by = .(substring(Species,1,1))]
# Agrupando por la primera letra del nombre de cada especie calcula la longitud media del sépalo
iris.dt[, ,(long_media_sepal = mean(Sepal.Length)), by = substring(.(Species),1,1)]
# Agrupando por la primera letra del nombre de cada especie calcula la longitud media del sépalo
iris.dt[, .(long_media_sepal = mean(Sepal.Length)), by = substring(.(Species),1,1)]
# Agrupando por la primera letra del nombre de cada especie calcula la longitud media del sépalo
iris.dt[, .(long_media_sepal = mean(Sepal.Length)), by = .(substring(Species,1,1))]
# Agrupa las especies por el área del sépalo (cada 10 cm2) y cuenta cuantos hay en cada bloque
iris.dt[, .(count = .N), by = .(Sepal.Length * Sepal.Width)]
# Para cada especie calcula la mediana de todas las columnas. Ordena el resultado por el nombre de la especie descendentemente.
iris.dt[, median(,), by=.(Species)]
# Para cada especie calcula la mediana de todas las columnas. Ordena el resultado por el nombre de la especie descendentemente.
iris.dt[, median(), by=.(Species)]
# Para cada especie calcula la mediana de todas las columnas. Ordena el resultado por el nombre de la especie descendentemente.
iris.dt[, by=.(Species)]
# Para cada especie calcula la mediana de todas las columnas. Ordena el resultado por el nombre de la especie descendentemente.
iris.dt[, .(mean()), by=.(Species)]
# Para cada especie calcula la mediana de todas las columnas. Ordena el resultado por el nombre de la especie descendentemente.
iris.dt[, .(mean(iris.dt[1:4])), by=.(Species)]
# Para cada especie calcula la mediana de todas las columnas. Ordena el resultado por el nombre de la especie descendentemente.
iris.dt[, .(mean(Sepal.Length), mean(Sepal.Width), mean(Petal.Length), min(Petal.Length)), by=.(Species)]
iris.dt[, lapply(SD[Sepal.Length], mean) , by = .(Species)]
iris.dt[, lapply(.SD[Sepal.Length], mean) , by = .(Species)]
# Para cada especie calcula la longitud media del sépalo
iris.dt[, .(long_media = mean(Sepal.Length)), by = .(Species)]
iris.dt[, lapply(.SD[Sepal.Length], mean) , by = .(Species)]
# Para cada especie calcula la longitud media del sépalo
iris.dt[, .(sepal_lenght_mean = mean(Sepal.Length)), by = .(Species)]
iris.dt[, lapply(.SD[Sepal.Length], mean) , by = .(Species)]
# Para cada especie calcula la mediana de todas las columnas. Ordena el resultado por el nombre de la especie descendentemente.
iris.dt[, .(mean(Sepal.Length), mean(Sepal.Width), mean(Petal.Length), min(Petal.Length)), by=.(Species)]
# Repite el ejercicio anterior usando .SD
iris.dt[, lapply(.SD, mean), by=.(Species)]
# Agrupa las especies por el área del sépalo (cada 10 cm2) y cuenta cuantos hay en cada bloque
iris.dt[, .(count = .N), by = .(Area = 10 * round(Sepal.Length * Sepal.Width /10 ))]
# Para cada especie calcula la mediana de todas las columnas. Ordena el resultado por el nombre de la especie descendentemente.
iris.dt[, .(median(Sepal.Length), median(Sepal.Width), median(Petal.Length), median(Petal.Length)), by=.(Species)][order(Species)]
# Para cada especie calcula la mediana de todas las columnas. Ordena el resultado por el nombre de la especie descendentemente.
iris.dt[, .(median(Sepal.Length), median(Sepal.Width), median(Petal.Length), median(Petal.Length)), by=.(Species)][order(-Species)]
# Repite el ejercicio anterior usando .SD
iris.dt[, lapply(.SD, median), by=.(Species)][order(-Species)]
# Para cada especie calcula la mediana de todas las columnas. Ordena el resultado por el nombre de la especie descendentemente.
iris.dt[, .(median(Sepal.Length), median(Sepal.Width), median(Petal.Length), median(Petal.Length)), by=.(Species)][order(-Species)]
# Repite el ejercicio anterior usando .SD
iris.dt[, lapply(.SD, median), by=.(Species)][order(-Species)]
# Filtra las filas de la especie virginica y versicolor
iris.dt[iris.dt[iris.dt$Species == "virginia" && iris.dt[iris.dt$Species == "versicolor"]]]
# Filtra las filas de la especie virginica y versicolor
iris.dt[iris.dt$Species == "virginia" && iris.dt$Species == "versicolor"]
iris.dt$Species == "virginia"
# Filtra las filas de la especie virginica y versicolor
iris.dt[iris.dt[iris.dt$Species == "virginia"]]
# Filtra las filas de la especie virginica y versicolor
iris.dt[[iris.dt$Species == "virginia"]]
iris.dt[iris.dt$Species == "virginia"]
iris.dt[iris.dt$Species == "virginica"]
# Filtra las filas de la especie virginica y versicolor
iris.dt[iris.dt[iris.dt$Species == "virginica"]]
iris.dt[iris.dt$Species == "virginica", iris.dt$Species == "versicolor"]
# Filtra las filas de la especie virginica y versicolor
iris.dt[iris.dt[iris.dt$Species == "virginica"]]
iris.dt[iris.dt$Species == "virginica"]]
iris.dt[iris.dt$Species == "virginica"]
iris.dt[iris.dt$Species == "virginica" | iris.dt$Species == "versicolor" ]
# Filtra las filas de la especie virginica y versicolor
iris.dt[iris.dt$Species == "virginica" | iris.dt$Species == "versicolor" ]
iris.dt[Species %in% c("virginica", "versicolor" )]
# Filtra las filas para las que el área es mayor que 20
iris.dt[Sepal.Length * Sepal.Width > 20]
library(stringr)
dias.semana <- c("lunes", "martes", "miércoles", "jueves", "viernes", "sábado", "domingo")
# Báscics
?str_extract
?str_view
?str_detect
str_extract(dias.semana, "es")
str_extract(dias.semana, regex("es"))
str_extract(dias.semana, "es")
str_extract(dias.semana, regex("es"))
str_view(dias.semana, "es")
str_view(dias.semana, regex("es"))
str_detect(dias.semana, "es")
str_detect(dias.semana, regex("es"))
los.lunes <- c("lunes", "Lunes", "LUNES")
str_detect(los.lunes, "lunes")
str_detect(los.lunes, regex("lunes", ignore_case = TRUE))
# Cualquier carácter "."
str_view(dias.semana, ".er.")
install.packages("htmlwidgets")
# Cualquier carácter "."
str_view(dias.semana, ".er.")
puntos <- c("abc", "c.d", "efg")
str_detect(puntos, "\\.")
# ¿Y qué pasa con el carácter "\"?
barras <- c("abc", "c\\d", "efg")
writeLines(barras)
str_detect(barras, "\\\\")
# Comienzo de cadena
str_view(dias.semana, "^m")
# Final de cadena
str_view(dias.semana, "es$")
# Regla nemotécnica: if you begin with power (^), you end up with money ($).
str_detect("$^$", "\\$\\^\\$")
# Regla nemotécnica: if you begin with power (^), you end up with money ($).
str_detect("$^$", "\\$\\^\\$")
str_view("$^$", "\\$\\^\\$")
library(stringr)
# How would you match the sequence "'\?
x <- "\"'\\?"
writeLines(x)
str_detect(x, "^\"'\\\\\\?$")
x <- ".a.b.c"
st
x <- ".a.b.c"
str_detect(x, "\\..\\..\\..")
x <- "a.b.c."
str_detect(x, "\\..\\..\\..")
x <- "$^$"
str_detect(x, "^\\$\\^\\$$")
#5. Restringiéndonos a los cursos lanzados en 2016, ¿qué temática cuenta con más horas de clase?
#dplyr
data %>%
mutate(year = year(published_timestamp)) %>%
filter(year == 2016) %>%
group_by(subject) %>%
summarise(hours_of_classes = sum(content_duration)) %>%
arrange(desc(hours_of_classes)) %>%
slice(1)
setwd("~/Programación+en+R+-+José+Manuel+Rodríguez-20201021/MDS_2020_2021_Programación_en_R_Práctica/practica-programacion-R")
#reading file
data <- read.csv('data/udemy_courses.csv', header = TRUE, sep = ",", stringsAsFactors = FALSE)
#redefining some columns
data["level"] <- factor(data$level, levels = unique(data$level), labels = unique(data$level))
data["subject"] <- factor(data$subject, levels = unique(data$subject), labels = unique(data$subject))
data["is_paid"] <- as.logical(data$is_paid)
library(tidyr)
library(reshape2)
library(lubridate)
#1.Crea una nueva course_id_title que sea la concatenación de ambas mediante un guion bajo
data <- unite(data, course_id_title, course_id, course_title, sep = "_", remove = FALSE)
#2. Sobreescribe el valor de las columnas published_timestamp por una columna de tipo fecha.
data["published_timestamp"] <- ymd_hms(data$published_timestamp)
#5. Restringiéndonos a los cursos lanzados en 2016, ¿qué temática cuenta con más horas de clase?
#dplyr
data %>%
mutate(year = year(published_timestamp)) %>%
filter(year == 2016) %>%
group_by(subject) %>%
summarise(hours_of_classes = sum(content_duration)) %>%
arrange(desc(hours_of_classes)) %>%
slice(1)
library(dplyr)
library(data.table)
#5. Restringiéndonos a los cursos lanzados en 2016, ¿qué temática cuenta con más horas de clase?
#dplyr
data %>%
mutate(year = year(published_timestamp)) %>%
filter(year == 2016) %>%
group_by(subject) %>%
summarise(hours_of_classes = sum(content_duration)) %>%
arrange(desc(hours_of_classes)) %>%
slice(1)
data %>%
filter(year(published_timestamp) == 2016) %>%
group_by(subject) %>%
summarise(hours_of_classes = sum(content_duration)) %>%
arrange(desc(hours_of_classes)) %>%
slice(1)
